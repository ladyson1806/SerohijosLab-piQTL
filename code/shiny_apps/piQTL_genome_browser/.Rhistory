if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
install.packages('igraph')
install.packages('igvR')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("igvR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("igvR", force = TRUE)
library(igvR)
library(glue)
##### TEST GENOME BROWSER ON HUMAN GENOME
igv <- igvR()
getSupportedGenomes(igv)
setBrowserWindowTitle(igv, "IGV - Test on Human Genome")
setGenome(igv, "hg38")
tbl.gff3 <- read.table(system.file(package="igvR", "extdata", "GRCh38.94.NDUFS2.gff3"),
sep="\t", as.is=TRUE)
colnames(tbl.gff3) <- c("seqid", "source", "type", "start", "end", "score", "strand",
"phase", "attributes")
colors <- list("antisense" = "blueviolet",
"protein_coding" = "blue",
"retained_intron" = "rgb(0, 150, 150)",
"processed_transcript" = "purple",
"processed_pseudogene" = "#7fff00",
"unprocessed_pseudogene" = "#d2691e",
"default" = "black")
track <- GFF3Track("dataframe gff3", tbl.gff3, colorByAttribute="biotype", colorTable=colors,
url=NA_character_, indexURL=NA_character_, displayMode="EXPANDED", trackHeight=200,
visibilityWindow=100000)
displayTrack(igv, track)
shiny::runApp('PROJECTS/PHD/piQTL/figures/piQTL_genome_browser')
track <- UCSCBedAnnotationTrack("UCSC bed", gr.bed,  color="blue", displayMode="SQUISHED")
bed.filepath <- system.file(package = "rtracklayer", "tests", "test.bed")
gr.bed <- rtracklayer::import(bed.filepath)
View(gr.bed)
track <- UCSCBedAnnotationTrack("UCSC bed", gr.bed,  color="blue", displayMode="SQUISHED")
displayTrack(igv, track)
igv <- igvR()
getSupportedGenomes(igv)
setBrowserWindowTitle(igv, "IGV - Test on Human Genome")
setGenome(igv, "hg38")
bed.filepath <- system.file(package = "rtracklayer", "tests", "test.bed")
gr.bed <- rtracklayer::import(bed.filepath)
track <- UCSCBedAnnotationTrack("UCSC bed", gr.bed,  color="blue", displayMode="SQUISHED")
displayTrack(igv, track)
exit
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer", force=TRUE)
install.packages("boot")
install.packages("foreign")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("spatial")
library(igvR)
library(glue)
##### TEST GENOME BROWSER ON HUMAN GENOME
igv <- igvR()
getSupportedGenomes(igv)
setBrowserWindowTitle(igv, "IGV - Test on Human Genome")
setGenome(igv, "hg38")
bed.filepath <- system.file(package = "rtracklayer", "tests", "test.bed")
gr.bed <- rtracklayer::import(bed.filepath)
track <- UCSCBedAnnotationTrack("UCSC bed", gr.bed,  color="blue", displayMode="SQUISHED")
displayTrack(igv, track)
View(track)
setGenome(igv, "hg38")
showGenomicRegion(igv, "MEF2C")
ah <- AnnotationHub()
library(Annotationhub)
library(AnnotationDbi)
ah <- AnnotationHub()
library(AnnotationHub)
install.packages("AnnotationHub")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationHub")
library(AnnotationHub)
ah <- AnnotationHub()
#----------------------------------------------------------------------------------------------------
# add refseq promoters, available from RefSeq for each transcript which has been identified
#----------------------------------------------------------------------------------------------------
ah.human.refseq <- query(ah.human, "RefSeq", "hg19", "RefSeq Genes")
ah.human <- subset(ah, species == "Homo sapiens")
#----------------------------------------------------------------------------------------------------
# add refseq promoters, available from RefSeq for each transcript which has been identified
#----------------------------------------------------------------------------------------------------
ah.human.refseq <- query(ah.human, "RefSeq", "hg19", "RefSeq Genes")
View(ah.human.refseq)
# download the first set
human.refseq <- ah.human.refseq[[1]]
gr.promoters <- promoters(human.refseq, upstream=2000, downstream=200)
mcols(gr.promoters) <- mcols(gr.promoters)[,1]
colnames(mcols(gr.promoters)) <- "name"
ov <- findOverlaps(gr.promoters, mef2c.region)
chrom <- "chr5"
shoulder <- 50000
start.loc <- 88013975 - shoulder
end.loc   <- 88199922 + shoulder
mef2c.region <- GRanges(seqnames=chrom, IRanges(start=start.loc, end=end.loc))
showGenomicRegion(igv, list(chrom=chrom, start=start.loc, end=end.loc))
mcols(gr.promoters) <- mcols(gr.promoters)[,1]
colnames(mcols(gr.promoters)) <- "name"
ov <- findOverlaps(gr.promoters, mef2c.region)
gr.mef2c.promoters <- gr.promoters[queryHits(ov)]
track.promoters <- UCSCBedAnnotationTrack("promoters", gr.mef2c.promoters, color="darkGreen")
displayTrack(igv, track.promoters)
gc()
library(igvR)
library(glue)
library(AnnotationHub)
##### TEST GENOME BROWSER ON HUMAN GENOME
igv <- igvR()
getSupportedGenomes(igv)
setBrowserWindowTitle(igv, "IGV - Test on Human Genome")
setGenome(igv, "hg38")
showGenomicRegion(igv, "MEF2C")
chrom <- "chr5"
shoulder <- 50000
start.loc <- 88013975 - shoulder
end.loc   <- 88199922 + shoulder
mef2c.region <- GRanges(seqnames=chrom, IRanges(start=start.loc, end=end.loc))
showGenomicRegion(igv, list(chrom=chrom, start=start.loc, end=end.loc))
ah <- AnnotationHub()
ah.human <- subset(ah, species == "Homo sapiens")
#----------------------------------------------------------------------------------------------------
# add refseq promoters, available from RefSeq for each transcript which has been identified
#----------------------------------------------------------------------------------------------------
ah.human.refseq <- query(ah.human, "RefSeq", "hg19", "RefSeq Genes")
# download the first set
human.refseq <- ah.human.refseq[[1]]
gr.promoters <- promoters(human.refseq, upstream=2000, downstream=200)
# get rid of score, itemRgb, thick, blocks columns in the mcols, keeping just the transcript name.
# these attributes are meaningful for transcript tracks since those include the represenation
# of UTRs, introns and exons.   but a promoter is a stretch of DNA for which those distinctions
# do not apply
mcols(gr.promoters) <- mcols(gr.promoters)[,1]
colnames(mcols(gr.promoters)) <- "name"
ov <- findOverlaps(gr.promoters, mef2c.region)
gr.mef2c.promoters <- gr.promoters[queryHits(ov)]
track.promoters <- UCSCBedAnnotationTrack("promoters", gr.mef2c.promoters, color="darkGreen")
displayTrack(igv, track.promoters)
showGenomicRegion(igv, "MEF2C")
chrom <- "chr5"
shoulder <- 50000
start.loc <- 88013975 - shoulder
end.loc   <- 88199922 + shoulder
mef2c.region <- GRanges(seqnames=chrom, IRanges(start=start.loc, end=end.loc))
showGenomicRegion(igv, list(chrom=chrom, start=start.loc, end=end.loc))
showGenomicRegion(igv, "MEF2C")
chrom <- "chr5"
shoulder <- 50000
start.loc <- 88013975 - shoulder
end.loc   <- 88199922 + shoulder
mef2c.region <- GRanges(seqnames=chrom, IRanges(start=start.loc, end=end.loc))
showGenomicRegion(igv, list(chrom=chrom, start=start.loc, end=end.loc))
igv <- igvR()
getSupportedGenomes(igv)
setBrowserWindowTitle(igv, "IGV - Test on Human Genome")
setGenome(igv, "sacCer3")
showGenomicRegion(igv, "ERG11")
ah.yeast <- subset(ah, species == "Saccharomyces cerevisiae")
igv <- igvR()
getSupportedGenomes(igv)
setBrowserWindowTitle(igv, "IGV - Test on Human Genome")
setGenome(igv, "sacCer3")
showGenomicRegion(igv, "ERG11")
ah <- AnnotationHub()
ah.human <- subset(ah, species == "Saccharomyces cerevisiae")
ah.yeast <- subset(ah, species == "Saccharomyces cerevisiae")
View(ah.human)
View(ah.human)
View(ah.yeast)
ah.yeast
ah.yeast$UCSC
ah.yeast$species
?org.Sc.sgd.db
ah.yeast[[AH7041]]
ah.yeast[["AH7041"]]
display(ah.yeast)
display(ah.yeast)
unique(ah.yeast$rdataclass)
setGenome(igv, "sacCer3")
showGenomicRegion(igv, "ERG11")
base.loc <- 88883100
tbl <- data.frame(chrom=rep("chr5", 3),
start=c(base.loc, base.loc+100, base.loc + 250),
end=c(base.loc + 50, base.loc+120, base.loc+290),
name=c("a", "b", "c"),
strand=rep("*", 3),
stringsAsFactors=FALSE)
gr <- GRanges(tbl)
track <- GRangesAnnotationTrack("GRangesQTest", gr)
display(igv,track)
setGenome(igv, "hg38")
base.loc <- 88883100
tbl <- data.frame(chrom=rep("chr5", 3),
start=c(base.loc, base.loc+100, base.loc + 250),
end=c(base.loc + 50, base.loc+120, base.loc+290),
name=c("a", "b", "c"),
strand=rep("*", 3),
stringsAsFactors=FALSE)
gr <- GRanges(tbl)
track <- GRangesAnnotationTrack("GRangesQTest", gr)
display(igv,track)
library(igvR)
library(glue)
library(AnnotationHub)
##### TEST GENOME BROWSER ON HUMAN GENOME
igv <- igvR()
getSupportedGenomes(igv)
setBrowserWindowTitle(igv, "IGV - Test on Human Genome")
setGenome(igv, "hg38")
ah <- AnnotationHub()
ah.human <- subset(ah, species == "Homo sapiens")
histone.tracks <- AnnotationHub::query(ah.human, c("H3K4me3", "Gm12878", "Peak", "narrow"))  # 3 tracks
descriptions <- histone.tracks$description
titles <- histone.tracks$title
colors <- rep(terrain.colors(6), 4)
color.index <- 0
roi <- with(getGenomicRegion(igv), GRanges(seqnames=chrom, IRanges(start=start, end=end)))
roi <- with(getGenomicRegion(igv), GRanges(seqnames=chrom, IRanges(start=start, end=end)))
setCustomGenome(igv,
id="hg38",
genomeName="Human (GRCh38/hg38)",
fastaURL="https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa",
fastaIndexURL="https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai",
chromosomeAliasURL=NA,
cytobandURL="https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg38/cytoBandIdeo.txt",
geneAnnotationName="Refseq Genes",
geneAnnotationURL="https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.txt.gz",
geneAnnotationTrackHeight=300,
geneAnnotationTrackColor="darkgreen",
initialLocus="chr5:88,621,308-89,001,037",
visibilityWindow=5000000)
setCustomGenome(igv,
id="hg38",
genomeName="Human (GRCh38/hg38)",
fastaURL="https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa",
fastaIndexURL="https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai",
chromosomeAliasURL=NA,
cytobandURL="https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg38/cytoBandIdeo.txt",
geneAnnotationName="Refseq Genes",
geneAnnotationURL="https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.txt.gz",
geneAnnotationTrackHeight=300,
geneAnnotationTrackColor="darkgreen",
initialLocus="chr5:88,621,308-89,001,037",
visibilityWindow=5000000)
igv <- igvR()
setCustomGenome(igv,
id="hg38",
genomeName="Human (GRCh38/hg38)",
fastaURL="https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa",
fastaIndexURL="https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai",
chromosomeAliasURL=NA,
cytobandURL="https://s3.amazonaws.com/igv.broadinstitute.org/annotations/hg38/cytoBandIdeo.txt",
geneAnnotationName="Refseq Genes",
geneAnnotationURL="https://s3.amazonaws.com/igv.org.genomes/hg38/refGene.txt.gz",
geneAnnotationTrackHeight=300,
geneAnnotationTrackColor="darkgreen",
initialLocus="chr5:88,621,308-89,001,037",
visibilityWindow=5000000)
base.loc <- 88883100
tbl <- data.frame(chrom=rep("chr5", 3),
start=c(base.loc, base.loc+100, base.loc + 250),
end=c(base.loc + 50, base.loc+120, base.loc+290),
name=c("a", "b", "c"),
strand=rep("*", 3),
stringsAsFactors=FALSE)
gr <- GRanges(tbl)
track <- GRangesAnnotationTrack("GRangesQTest", gr)
# url <- "https://s3.amazonaws.com/igv.org.demo/gwas_sample.tsv.gz"
# track <- GWASUrlTrack("igv sample", url,chrom.col=12, pos.col=13, pval.col=28)
displayTrack(igv, track)
tbl.gff3 <- read.table(system.file(package="igvR", "extdata", "GRCh38.94.NDUFS2.gff3"),
sep="\t", as.is=TRUE)
colnames(tbl.gff3) <- c("seqid", "source", "type", "start", "end", "score", "strand",
"phase", "attributes")
colors <- list("antisense" = "blueviolet",
"protein_coding" = "blue",
"retained_intron" = "rgb(0, 150, 150)",
"processed_transcript" = "purple",
"processed_pseudogene" = "#7fff00",
"unprocessed_pseudogene" = "#d2691e",
"default" = "black")
track <- GFF3Track("dataframe gff3", tbl.gff3, colorByAttribute="biotype", colorTable=colors,
url=NA_character_, indexURL=NA_character_, displayMode="EXPANDED", trackHeight=200,
GRangesAnnotationTrack-class 15
View(tbl)
colnames(tbl.gff3) <- c("seqid", "source", "type", "start", "end", "score", "strand",
"phase", "attributes")
tbl.gff3 <- read.table(system.file(package="igvR", "extdata", "GRCh38.94.NDUFS2.gff3"),
sep="\t", as.is=TRUE)
colnames(tbl.gff3) <- c("seqid", "source", "type", "start", "end", "score", "strand",
"phase", "attributes")
colors <- list("antisense" = "blueviolet",
"protein_coding" = "blue",
"retained_intron" = "rgb(0, 150, 150)",
"processed_transcript" = "purple",
"processed_pseudogene" = "#7fff00",
"unprocessed_pseudogene" = "#d2691e",
"default" = "black")
track <- GFF3Track("dataframe gff3", tbl.gff3, colorByAttribute="biotype", colorTable=colors,
url=NA_character_, indexURL=NA_character_, displayMode="EXPANDED", trackHeight=200,
visibilityWindow=100000)
# url <- "https://s3.amazonaws.com/igv.org.demo/gwas_sample.tsv.gz"
# track <- GWASUrlTrack("igv sample", url,chrom.col=12, pos.col=13, pval.col=28)
displayTrack(igv, track)
# url <- "https://s3.amazonaws.com/igv.org.demo/gwas_sample.tsv.gz"
# track <- GWASUrlTrack("igv sample", url,chrom.col=12, pos.col=13, pval.col=28)
displayTrack(igv, track)
library(igvR)
igv <- igvR()
setBrowserWindowTitle(igv, "CTCF ChIP-seq")
setGenome(igv, "hg38")
showGenomicRegion(igv, "chr3:128,079,020-128,331,275")
# or
showGenomicRegion(igv, "GATA2")
for(i in 1:4) zoomOut(igv)
roi <- getGenomicRegion(igv)
gr.roi <- with(roi, GRanges(seqnames=chrom, ranges = IRanges(start, end)))
param <- ScanBamParam(which=gr.roi, what = scanBamWhat())
bamFile <- system.file(package="igvR", "extdata", "ctcf-gata2", "gata2-region-hg19.bam")
alignments <- readGAlignments(bamFile, use.names=TRUE, param=param)
track <- GenomicAlignmentTrack(trackName="ctcf bam", alignments, visibilityWindow=10000000, trackHeight=200)
displayTrack(igv, track)
library(igvR)
igv <- igvR()
setBrowserWindowTitle(igv, "CTCF ChIP-seq")
setGenome(igv, "hg19")
load(system.file(package="igvR", "extdata", "tbl.mef2cGWAS.variants.RData"))
tbl.mef2cGWAS.variants.bed <- tbl.mef2cGWAS.variants[, c("CHR", "oldPos", "oldPos", "SNP", "P")]
tbl.mef2cGWAS.variants.bed$P <- -log10(tbl.mef2cGWAS.variants.bed$P)
colnames(tbl.mef2cGWAS.variants.bed) <- c("chrom", "start", "end", "name", "score")
track.gwas <- DataFrameAnnotationTrack("IGAP.gwas", tbl.mef2cGWAS.variants.bed, trackHeight=20, color="darkBlue")
displayTrack(igv, track.gwas)
load(system.file(package="igvR", "extdata", "tbl.mef2cGWAS.variants.RData"))
tbl.mef2cGWAS.variants.bed <- tbl.mef2cGWAS.variants[, c("CHR", "oldPos", "oldPos", "SNP", "P")]
tbl.mef2cGWAS.variants.bed$P <- -log10(tbl.mef2cGWAS.variants.bed$P)
colnames(tbl.mef2cGWAS.variants.bed) <- c("chrom", "start", "end", "name", "score")
track.gwas <- DataFrameAnnotationTrack("IGAP.gwas", tbl.mef2cGWAS.variants.bed, trackHeight=20, color="darkBlue")
displayTrack(igv, track.gwas)
library(igvR)
library(AnnotationHub)
igv <- igvR()
setBrowserWindowTitle(igv, "MEF2C")
setGenome(igv, "hg19")
Sys.sleep(5)   # wait a few seconds before zooming into MEF2C
showGenomicRegion(igv, "MEF2C")
chrom <- "chr5"
shoulder <- 50000
start.loc <- 88013975 - shoulder
end.loc   <- 88199922 + shoulder
mef2c.region <- GRanges(seqnames=chrom, IRanges(start=start.loc, end=end.loc))
showGenomicRegion(igv, list(chrom=chrom, start=start.loc, end=end.loc))
ah <- AnnotationHub()
ah.human <- subset(ah, species == "Homo sapiens")
#----------------------------------------------------------------------------------------------------
# add refseq promoters, available from RefSeq for each transcript which has been identified
#----------------------------------------------------------------------------------------------------
ah.human.refseq <- query(ah.human, "RefSeq", "hg19", "RefSeq Genes")
# download the first set
human.refseq <- ah.human.refseq[[1]]
gr.promoters <- promoters(human.refseq, upstream=2000, downstream=200)
# get rid of score, itemRgb, thick, blocks columns in the mcols, keeping just the transcript name.
# these attributes are meaningful for transcript tracks since those include the represenation
# of UTRs, introns and exons.   but a promoter is a stretch of DNA for which those distinctions
# do not apply
mcols(gr.promoters) <- mcols(gr.promoters)[,1]
colnames(mcols(gr.promoters)) <- "name"
ov <- findOverlaps(gr.promoters, mef2c.region)
gr.mef2c.promoters <- gr.promoters[queryHits(ov)]
track.promoters <- UCSCBedAnnotationTrack("promoters", gr.mef2c.promoters, color="darkGreen")
displayTrack(igv, track.promoters)
View(gr.mef2c.promoters)
igv <- igvR()
setGenome(igv, "hg38")
showGenomicRegion(igv, "MEF2C")
base.loc <- 88883100
tbl <- data.frame(chrom=rep("chr5", 3),
start=c(base.loc, base.loc+100, base.loc + 250),
end=c(base.loc + 50, base.loc+120, base.loc+290),
name=c("a", "b", "c"),
score=runif(3),
strand=rep("*", 3),
stringsAsFactors=FALSE)
track <- DataFrameAnnotationTrack("dataframeTest", tbl, color="red",
displayMode="EXPANDED")
showGenomicRegion(igv, "chr5:88,881,962-88,885,045")
displayTrack(igv, track)
library(igvR)
igv <- igvR()
setBrowserWindowTitle(igv, "simple igvR demo")
setGenome(igv, "hg38")
showGenomicRegion(igv, "MYC")
loc <- getGenomicRegion(igv)
tbl.bed <- data.frame(chrom=loc$chrom, start=loc$start + 2000, end=loc$end-2000,
name="simple.example", stringsAsFactors=FALSE)
track <- DataFrameAnnotationTrack("simple bed", tbl.bed, color="random")
displayTrack(igv, track)
View(track)
View(track)
View(track@coreObject)
track <- GWASTrack("simple bed", tbl.bed, color="random")
view <- browserView(session, range,
hide = c("refGene", "mgcFullMrna", "intronEst"),
dense = "knownGene", squish = "cons44way")
###################################################
### chunk number 1: rtl-init
###################################################
library(rtracklayer)
data(targets)
###################################################
### chunk number 2: rtl-miRNA-track
###################################################
targetTrack <- makeGRangesFromDataFrame(targets,
keep.extra.columns=TRUE)
###################################################
### chunk number 3: rtl-export eval=FALSE
###################################################
## export(targetTrack, "targets.wig")
###################################################
### chunk number 4: rtl-ucsc-start
###################################################
session <- browserSession()
genome(session) <- "hg18"
###################################################
### chunk number 5: rtl-ucsc-lay
###################################################
session$targets <- targetTrack
###################################################
### chunk number 6: rtl-ucsc-view eval=FALSE
###################################################
top <- targetTrack$target == targets$target[1]
range <- targetTrack[top,] * -10
view <- browserView(session, range,
hide = c("refGene", "mgcFullMrna", "intronEst"),
dense = "knownGene", squish = "cons44way")
View(targets)
# Display the current working directory
getwd()
# If necessary, change the path below to the directory where the data files are stored.
# "." means current directory. On Windows use a forward slash / instead of the usual \.
workingDir = "."
setwd(workingDir)
# Load the WGCNA package
library(WGCNA)
library(flashClust)
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE)
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
# At present this call is necessary for the code to work.
# Any error here may be ignored but you may want to update WGCNA if you see one.
# Caution: skip this line if you run RStudio or other third-party R environments.
# See note above.
enableWGCNAThreads()
sessionInfo()
library(igvShiny)
?igvShiny
?loadGFF3TrackFromLocalData
runApp('PROJECTS/PHD/piQTL_to_remove/code/shiny_apps/piQTL_genome_browser')
?igvShiny
igvShiny(tracks = loadGFF3TrackFromLocalData(session, id="igvShiny_0", "LD blocks", LDs.gff3, color='grey', colorByAttribute='type', colorTable=list(), displayMode="EXPANDED", trackHeight=50, visibilityWindow=100000))
runApp('PROJECTS/PHD/piQTL_to_remove/code/shiny_apps/piQTL_genome_browser')
?loadGwasTrack
?loadGFF3TrackFromLocalData
GwasTrack()
?GwasTrack()
?GWASTrack()
shiny::runApp('PROJECTS/PHD/piQTL/code/shiny_apps/piQTL_genome_browser')
